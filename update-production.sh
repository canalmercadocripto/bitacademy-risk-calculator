#!/bin/bash

# Atualiza√ß√£o de Produ√ß√£o - BitAcademy
# Script para atualizar aplica√ß√£o j√° em produ√ß√£o

echo "üîÑ ATUALIZA√á√ÉO PRODU√á√ÉO - BITACADEMY"
echo "===================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
APP_DIR="/var/www/bitacademy"
BACKUP_DIR="/var/backups/bitacademy"
DATE=$(date +%Y%m%d_%H%M%S)
BRANCH="main"

log() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ${NC} $1"
}

error() {
    echo -e "${RED}‚ùå${NC} $1"
    exit 1
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è${NC} $1"
}

# Verificar se est√° rodando como root
if [ "$EUID" -ne 0 ]; then
    error "Execute como root: sudo $0"
fi

# Verificar se aplica√ß√£o existe
if [ ! -d "$APP_DIR" ]; then
    error "Aplica√ß√£o n√£o encontrada em $APP_DIR. Execute o deploy inicial primeiro."
fi

echo ""
log "üîç Verificando estado atual..."

cd "$APP_DIR" || error "N√£o foi poss√≠vel acessar $APP_DIR"

# Verificar se √© um reposit√≥rio git
if [ ! -d ".git" ]; then
    error "Diret√≥rio n√£o √© um reposit√≥rio Git v√°lido"
fi

# Obter informa√ß√µes atuais
CURRENT_COMMIT=$(git rev-parse --short HEAD)
CURRENT_BRANCH=$(git branch --show-current)

success "Branch atual: $CURRENT_BRANCH"
success "Commit atual: $CURRENT_COMMIT"

echo ""
log "üíæ Criando backup completo..."

# Criar backup da aplica√ß√£o atual
BACKUP_NAME="backup_pre_update_$DATE"
mkdir -p "$BACKUP_DIR"

# Backup dos arquivos principais
tar -czf "$BACKUP_DIR/${BACKUP_NAME}.tar.gz" \
    --exclude='.git' \
    --exclude='node_modules' \
    --exclude='frontend/build' \
    -C /var/www bitacademy

# Backup do banco de dados
if [ -f "$APP_DIR/backend/bitacademy.db" ]; then
    cp "$APP_DIR/backend/bitacademy.db" "$BACKUP_DIR/bitacademy_${DATE}.db"
    success "Backup do banco criado"
fi

success "Backup criado em: $BACKUP_DIR/${BACKUP_NAME}.tar.gz"

echo ""
log "üì• Atualizando c√≥digo do GitHub..."

# Stash mudan√ßas locais se existirem
if ! git diff --quiet; then
    warning "Mudan√ßas locais detectadas. Fazendo stash..."
    git stash push -m "Auto-stash antes da atualiza√ß√£o $DATE"
fi

# Fetch das atualiza√ß√µes
git fetch origin

# Verificar se h√° atualiza√ß√µes
REMOTE_COMMIT=$(git rev-parse --short origin/$BRANCH)

if [ "$CURRENT_COMMIT" = "$REMOTE_COMMIT" ]; then
    warning "Nenhuma atualiza√ß√£o dispon√≠vel. Sistema j√° est√° atualizado."
    echo ""
    echo "Deseja continuar mesmo assim? (y/N): "
    read -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        success "Atualiza√ß√£o cancelada"
        exit 0
    fi
else
    success "Nova vers√£o dispon√≠vel: $REMOTE_COMMIT"
fi

# Pull das atualiza√ß√µes
git pull origin $BRANCH

if [ $? -ne 0 ]; then
    error "Falha ao atualizar c√≥digo do GitHub"
fi

NEW_COMMIT=$(git rev-parse --short HEAD)
success "C√≥digo atualizado para commit: $NEW_COMMIT"

echo ""
log "‚öôÔ∏è Atualizando depend√™ncias..."

# Atualizar depend√™ncias do backend
cd backend
if [ -f "package.json" ]; then
    npm install --production
    if [ $? -ne 0 ]; then
        warning "Falha ao atualizar depend√™ncias do backend"
    else
        success "Depend√™ncias do backend atualizadas"
    fi
fi

# Executar migra√ß√µes se necess√°rio
if [ -f "src/database/migrations-sqlite.js" ]; then
    log "Executando migra√ß√µes de banco..."
    node -e "
        const { runMigrations } = require('./src/database/migrations-sqlite.js');
        runMigrations().catch(console.error);
    "
    success "Migra√ß√µes executadas"
fi

echo ""
log "üé® Reconstruindo frontend..."

cd ../frontend
if [ -f "package.json" ]; then
    # Instalar depend√™ncias
    npm install
    
    if [ $? -ne 0 ]; then
        warning "Falha ao instalar depend√™ncias do frontend"
    else
        success "Depend√™ncias do frontend instaladas"
    fi
    
    # Build de produ√ß√£o
    npm run build
    
    if [ $? -ne 0 ]; then
        error "Falha no build do frontend"
    else
        success "Build de produ√ß√£o atualizado"
    fi
else
    warning "package.json n√£o encontrado no frontend"
fi

echo ""
log "üîÑ Reiniciando servi√ßos..."

cd "$APP_DIR"

# Reiniciar aplica√ß√£o com PM2
pm2 reload ecosystem.config.js

if [ $? -ne 0 ]; then
    warning "Falha ao recarregar com PM2, tentando restart..."
    pm2 restart all
fi

# Recarregar Nginx
systemctl reload nginx

success "Servi√ßos reiniciados"

echo ""
log "‚è≥ Aguardando estabiliza√ß√£o..."
sleep 10

echo ""
log "üß™ Testando aplica√ß√£o atualizada..."

# Testes de funcionalidade
TESTS_PASSED=0
TOTAL_TESTS=4

# Teste 1: PM2 Status
if pm2 list | grep -q "online"; then
    success "‚úÖ PM2 com aplica√ß√µes online"
    TESTS_PASSED=$((TESTS_PASSED + 1))
else
    warning "‚ùå Problemas no PM2"
fi

# Teste 2: Backend
if curl -s http://localhost:3001/health > /dev/null; then
    success "‚úÖ Backend respondendo"
    TESTS_PASSED=$((TESTS_PASSED + 1))
else
    warning "‚ùå Backend n√£o responde"
fi

# Teste 3: Frontend
if curl -s http://localhost/ > /dev/null; then
    success "‚úÖ Frontend respondendo"
    TESTS_PASSED=$((TESTS_PASSED + 1))
else
    warning "‚ùå Frontend n√£o responde"
fi

# Teste 4: API de registro
REGISTER_TEST=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:3001/api/auth/register \
    -H "Content-Type: application/json" \
    -d '{}' 2>/dev/null)

if [ "$REGISTER_TEST" = "400" ]; then
    success "‚úÖ API funcionando corretamente"
    TESTS_PASSED=$((TESTS_PASSED + 1))
else
    warning "‚ùå API retornou: $REGISTER_TEST"
fi

# Taxa de sucesso
SUCCESS_RATE=$((TESTS_PASSED * 100 / TOTAL_TESTS))

echo ""
if [ $SUCCESS_RATE -ge 75 ]; then
    success "üéâ ATUALIZA√á√ÉO CONCLU√çDA COM SUCESSO!"
    echo ""
    echo -e "${GREEN}üìä Taxa de sucesso: $SUCCESS_RATE% ($TESTS_PASSED/$TOTAL_TESTS)${NC}"
    
    # Remover backup antigo se tudo ok
    if [ $SUCCESS_RATE -eq 100 ]; then
        # Manter apenas os 3 backups mais recentes
        cd "$BACKUP_DIR"
        ls -t backup_pre_update_*.tar.gz | tail -n +4 | xargs -r rm
        success "Backups antigos removidos"
    fi
else
    error "‚ö†Ô∏è Atualiza√ß√£o com problemas ($SUCCESS_RATE% sucesso). Verifique os logs."
fi

echo ""
echo -e "${BLUE}üìã RESUMO DA ATUALIZA√á√ÉO:${NC}"
echo "Commit anterior: $CURRENT_COMMIT"
echo "Commit atual: $NEW_COMMIT"
echo "Data: $(date)"
echo "Taxa de sucesso: $SUCCESS_RATE%"
echo ""
echo -e "${YELLOW}üîß COMANDOS √öTEIS:${NC}"
echo "pm2 logs                # Ver logs em tempo real"
echo "pm2 status              # Status aplica√ß√µes"
echo "systemctl status nginx  # Status Nginx"
echo ""

# Salvar log da atualiza√ß√£o
cat > "$BACKUP_DIR/update_${DATE}.txt" << EOF
ATUALIZA√á√ÉO BITACADEMY - $DATE
=============================

Data: $(date)
Commit anterior: $CURRENT_COMMIT
Commit novo: $NEW_COMMIT
Taxa de sucesso: $SUCCESS_RATE%
Backup: ${BACKUP_NAME}.tar.gz

Testes realizados:
- PM2: $([ $((TESTS_PASSED >= 1)) -eq 1 ] && echo "‚úÖ" || echo "‚ùå")
- Backend: $([ $((TESTS_PASSED >= 2)) -eq 1 ] && echo "‚úÖ" || echo "‚ùå")
- Frontend: $([ $((TESTS_PASSED >= 3)) -eq 1 ] && echo "‚úÖ" || echo "‚ùå")
- API: $([ $((TESTS_PASSED >= 4)) -eq 1 ] && echo "‚úÖ" || echo "‚ùå")

Status: ATUALIZA√á√ÉO CONCLU√çDA
EOF

success "Log salvo em: $BACKUP_DIR/update_${DATE}.txt"

# Rollback autom√°tico se muitas falhas
if [ $SUCCESS_RATE -lt 50 ]; then
    echo ""
    warning "‚ö†Ô∏è MUITAS FALHAS DETECTADAS!"
    echo "Deseja fazer rollback autom√°tico para a vers√£o anterior? (y/N): "
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log "üîÑ Executando rollback..."
        
        # Restaurar c√≥digo
        git reset --hard "$CURRENT_COMMIT"
        
        # Restaurar banco se necess√°rio
        if [ -f "$BACKUP_DIR/bitacademy_${DATE}.db" ]; then
            cp "$BACKUP_DIR/bitacademy_${DATE}.db" "$APP_DIR/backend/bitacademy.db"
        fi
        
        # Reinstalar e rebuild
        cd "$APP_DIR/backend" && npm install --production
        cd "$APP_DIR/frontend" && npm install && npm run build
        
        # Reiniciar servi√ßos
        pm2 restart all
        systemctl reload nginx
        
        success "Rollback executado. Sistema restaurado para $CURRENT_COMMIT"
    fi
fi

echo ""
success "üöÄ ATUALIZA√á√ÉO FINALIZADA!"