## COMANDO ÚNICO PARA RESOLVER TUDO NA VPS ##

# Copie e cole este comando completo no terminal da sua VPS:

cd /var/www/bitacademy-calculator/backend && \
cp src/models/User.js src/models/User.js.backup.$(date +%s) && \
cat > src/models/User.js << 'EOF'
const { query } = require('../config/database-sqlite');
const bcrypt = require('bcrypt');

class User {
  static async create({ email, password, name, lastName, phone, countryCode = '+55', role = 'user' }) {
    try {
      if (!phone || phone.trim().length === 0) {
        throw new Error('Telefone é obrigatório');
      }
      const passwordHash = await bcrypt.hash(password, 12);
      const crypto = require('crypto');
      const userId = crypto.randomBytes(16).toString('hex');
      const result = await query(`
        INSERT INTO users (id, email, password_hash, name, last_name, phone, country_code, role) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `, [userId, email, passwordHash, name, lastName, phone, countryCode, role]);
      const newUser = await query(`
        SELECT id, email, name, last_name, phone, country_code, role, created_at
        FROM users WHERE id = ?
      `, [userId]);
      return newUser.rows[0];
    } catch (error) {
      if (error.code === 'SQLITE_CONSTRAINT' || error.message.includes('UNIQUE constraint failed')) {
        throw new Error('Email já está em uso');
      }
      throw error;
    }
  }
  static async findByEmail(email) {
    const result = await query(`
      SELECT id, email, password_hash, name, last_name, phone, country_code, role, is_active, last_login, created_at
      FROM users WHERE email = ? AND is_active = 1
    `, [email]);
    return result.rows[0];
  }
  static async findById(id) {
    const result = await query(`
      SELECT id, email, name, last_name, phone, country_code, role, is_active, last_login, created_at
      FROM users WHERE id = ?
    `, [id]);
    const user = result.rows[0];
    if (user) {
      user.lastName = user.last_name;
      user.countryCode = user.country_code;
    }
    return user;
  }
  static async findByIdWithPassword(id) {
    const result = await query(`
      SELECT id, email, name, last_name, phone, country_code, password_hash, role, is_active, last_login, created_at
      FROM users WHERE id = ?
    `, [id]);
    const user = result.rows[0];
    if (user) {
      user.lastName = user.last_name;
      user.countryCode = user.country_code;
    }
    return user;
  }
  static async verifyPassword(plainPassword, hashedPassword) {
    return await bcrypt.compare(plainPassword, hashedPassword);
  }
  static async updateLastLogin(userId) {
    await query(`UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = ?`, [userId]);
  }
  static async updateProfile(userId, profileData) {
    try {
      const { name, lastName, email, phone, countryCode } = profileData;
      const result = await query(`
        UPDATE users SET name = ?, last_name = ?, email = ?, phone = ?, country_code = ?, updated_at = CURRENT_TIMESTAMP 
        WHERE id = ?
      `, [name, lastName, email, phone, countryCode, userId]);
      return result.affectedRows > 0 || result.changes > 0;
    } catch (error) {
      if (error.code === 'SQLITE_CONSTRAINT' || error.message.includes('UNIQUE constraint failed')) {
        throw new Error('Email já está em uso');
      }
      throw error;
    }
  }
  static async updatePassword(userId, newPassword) {
    try {
      const passwordHash = await bcrypt.hash(newPassword, 12);
      const result = await query(`
        UPDATE users SET password_hash = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?
      `, [passwordHash, userId]);
      return result.affectedRows > 0 || result.changes > 0;
    } catch (error) {
      console.error('Erro ao atualizar senha:', error);
      throw error;
    }
  }
  static async getAll(page = 1, limit = 50) {
    const offset = (page - 1) * limit;
    const result = await query(`
      SELECT u.id, u.email, u.name, u.last_name, u.phone, u.country_code, u.role, u.is_active, u.last_login, u.created_at,
        COUNT(th.id) as total_trades
      FROM users u
      LEFT JOIN trade_history th ON u.id = th.user_id
      GROUP BY u.id, u.email, u.name, u.last_name, u.phone, u.country_code, u.role, u.is_active, u.last_login, u.created_at
      ORDER BY u.created_at DESC LIMIT ? OFFSET ?
    `, [limit, offset]);
    const countResult = await query(`SELECT COUNT(*) as total FROM users`);
    return {
      users: result.rows,
      total: parseInt(countResult.rows[0].total),
      page,
      totalPages: Math.ceil(countResult.rows[0].total / limit)
    };
  }
  static async getStats() {
    const result = await query(`
      SELECT 
        COUNT(CASE WHEN role = 'user' THEN 1 END) as total_users,
        COUNT(CASE WHEN role = 'admin' THEN 1 END) as total_admins,
        COUNT(CASE WHEN last_login > datetime('now', '-7 days') THEN 1 END) as active_week,
        COUNT(CASE WHEN last_login > datetime('now', '-30 days') THEN 1 END) as active_month,
        COUNT(CASE WHEN created_at > datetime('now', '-7 days') THEN 1 END) as new_week
      FROM users WHERE is_active = 1
    `);
    return result.rows[0];
  }
}
module.exports = User;
EOF
echo "✅ User.js corrigido" && \
pm2 stop bitacademy-calculator && \
sleep 3 && \
pm2 start bitacademy-calculator && \
sleep 8 && \
echo "🧪 Testando..." && \
curl -s http://localhost:3001/health && \
echo "" && \
curl -s http://calculadora.bitacademy.vip/api/health && \
echo "" && \
echo "🎉 SE APARECEU 'OK' ACIMA, ESTÁ FUNCIONANDO!" && \
echo "🌐 Acesse: http://calculadora.bitacademy.vip" && \
echo "🔑 Login: admin@seudominio.com" && \
echo "🔐 Senha: Admin123456!"