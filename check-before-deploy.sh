#!/bin/bash

echo "üîç VERIFICA√á√ÉO PR√â-DEPLOY - BITACADEMY CALCULATOR"
echo "================================================"

ERRORS=0

echo ""
echo "1. üìã Verificando arquivos essenciais..."

# Verificar arquivos principais
REQUIRED_FILES=(
    "backend/server.js"
    "backend/package.json"
    "frontend/package.json"
    "frontend/src/App.js"
    "create-admin.js"
    "reset-admin-password.js"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$file" ]; then
        echo "   ‚úÖ $file"
    else
        echo "   ‚ùå $file FALTANDO"
        ERRORS=$((ERRORS + 1))
    fi
done

echo ""
echo "2. üîß Verificando configura√ß√µes do backend..."

# Verificar rotas essenciais
if grep -q "authRoutes" backend/server.js; then
    echo "   ‚úÖ Rotas de autentica√ß√£o configuradas"
else
    echo "   ‚ùå Rotas de autentica√ß√£o FALTANDO"
    ERRORS=$((ERRORS + 1))
fi

if grep -q "updateProfile" backend/src/controllers/AuthController.js; then
    echo "   ‚úÖ Fun√ß√£o updateProfile implementada"
else
    echo "   ‚ùå Fun√ß√£o updateProfile FALTANDO"
    ERRORS=$((ERRORS + 1))
fi

if grep -q "changePassword" backend/src/controllers/AuthController.js; then
    echo "   ‚úÖ Fun√ß√£o changePassword implementada"
else
    echo "   ‚ùå Fun√ß√£o changePassword FALTANDO"
    ERRORS=$((ERRORS + 1))
fi

echo ""
echo "3. üé® Verificando componentes do frontend..."

# Verificar componentes essenciais
COMPONENTS=(
    "frontend/src/components/AuthModal.js"
    "frontend/src/components/LoginPage.js"
    "frontend/src/components/UserProfile.js"
    "frontend/src/components/PhoneInput.js"
)

for component in "${COMPONENTS[@]}"; do
    if [ -f "$component" ]; then
        echo "   ‚úÖ $(basename $component)"
    else
        echo "   ‚ùå $(basename $component) FALTANDO"
        ERRORS=$((ERRORS + 1))
    fi
done

# Verificar se PhoneInput est√° integrado
if grep -q "PhoneInput" frontend/src/components/LoginPage.js; then
    echo "   ‚úÖ PhoneInput integrado no LoginPage"
else
    echo "   ‚ùå PhoneInput N√ÉO integrado no LoginPage"
    ERRORS=$((ERRORS + 1))
fi

echo ""
echo "4. üì± Verificando funcionalidades do telefone..."

if grep -q "lastName" frontend/src/components/LoginPage.js; then
    echo "   ‚úÖ Campo lastName no formul√°rio"
else
    echo "   ‚ùå Campo lastName FALTANDO"
    ERRORS=$((ERRORS + 1))
fi

if grep -q "phone" frontend/src/components/LoginPage.js; then
    echo "   ‚úÖ Campo phone no formul√°rio"
else
    echo "   ‚ùå Campo phone FALTANDO"
    ERRORS=$((ERRORS + 1))
fi

echo ""
echo "5. üóÑÔ∏è Verificando modelo de dados..."

if grep -q "updateProfile" backend/src/models/User.js; then
    echo "   ‚úÖ M√©todo updateProfile no modelo User"
else
    echo "   ‚ùå M√©todo updateProfile FALTANDO no modelo User"
    ERRORS=$((ERRORS + 1))
fi

if grep -q "last_name" backend/src/models/User.js; then
    echo "   ‚úÖ Campo last_name no modelo"
else
    echo "   ‚ùå Campo last_name FALTANDO no modelo"
    ERRORS=$((ERRORS + 1))
fi

echo ""
echo "6. üîê Verificando scripts administrativos..."

if node -e "require('./create-admin.js')" 2>/dev/null; then
    echo "   ‚úÖ Script create-admin.js v√°lido"
else
    echo "   ‚ö†Ô∏è  Script create-admin.js pode ter problemas"
fi

if node -e "require('./reset-admin-password.js')" 2>/dev/null; then
    echo "   ‚úÖ Script reset-admin-password.js v√°lido"
else
    echo "   ‚ö†Ô∏è  Script reset-admin-password.js pode ter problemas"
fi

echo ""
echo "7. üì¶ Verificando depend√™ncias..."

cd backend
if npm list --production --silent 2>/dev/null; then
    echo "   ‚úÖ Depend√™ncias do backend OK"
else
    echo "   ‚ö†Ô∏è  Verificar depend√™ncias do backend"
fi
cd ..

cd frontend
if npm list --silent 2>/dev/null; then
    echo "   ‚úÖ Depend√™ncias do frontend OK"
else
    echo "   ‚ö†Ô∏è  Verificar depend√™ncias do frontend"
fi
cd ..

echo ""
echo "8. üåê Verificando configura√ß√µes de produ√ß√£o..."

if grep -q "CORS_ORIGIN" backend/server.js; then
    echo "   ‚úÖ CORS configurado para produ√ß√£o"
else
    echo "   ‚ùå CORS N√ÉO configurado para produ√ß√£o"
    ERRORS=$((ERRORS + 1))
fi

if grep -q "NODE_ENV.*production" backend/server.js; then
    echo "   ‚úÖ Detec√ß√£o de ambiente de produ√ß√£o"
else
    echo "   ‚ùå Detec√ß√£o de ambiente de produ√ß√£o FALTANDO"
    ERRORS=$((ERRORS + 1))
fi

echo ""
echo "9. ‚ö° Testando funcionalidades principais..."

# Testar backend rapidamente
cd backend
if timeout 10s npm run dev > /dev/null 2>&1 & sleep 3 && curl -s http://localhost:3001/health | grep -q "OK"; then
    echo "   ‚úÖ Backend inicia e responde"
    pkill -f "node.*server.js" 2>/dev/null
else
    echo "   ‚ö†Ô∏è  Backend pode ter problemas para iniciar"
    pkill -f "node.*server.js" 2>/dev/null
fi
cd ..

# Verificar se o build do frontend funciona
cd frontend
if npm run build > /dev/null 2>&1; then
    echo "   ‚úÖ Build do frontend funciona"
    rm -rf build 2>/dev/null
else
    echo "   ‚ùå Build do frontend FALHA"
    ERRORS=$((ERRORS + 1))
fi
cd ..

echo ""
echo "================================================"

if [ $ERRORS -eq 0 ]; then
    echo "üéâ VERIFICA√á√ÉO COMPLETA - TUDO OK!"
    echo "‚úÖ Pronto para deploy em produ√ß√£o"
    echo ""
    echo "üìã Pr√≥ximos passos:"
    echo "   1. Execute: git add . && git commit -m 'deploy: preparar para produ√ß√£o'"
    echo "   2. Execute: git push origin main"
    echo "   3. Na VPS execute: wget https://raw.githubusercontent.com/canalmercadocripto/bitacademy-risk-calculator/main/deploy-production.sh"
    echo "   4. Na VPS execute: chmod +x deploy-production.sh && sudo ./deploy-production.sh"
else
    echo "‚ùå PROBLEMAS ENCONTRADOS: $ERRORS"
    echo "‚ö†Ô∏è  Corrija os erros antes do deploy"
fi

echo ""